<?php/** * Created by PhpStorm. * UserModel: chenyouxi * Date: 2019/5/27 * Time: 2:18 PM */namespace app\website\controller;use think\facade\Cache as Cache;use think\Controller;use think\facade\Session as Session;use think\Cookie;use think\Request;use app\common\service\Config as WebConfig;use app\common\service\User;use oauth\ThinkOauth as ThinkOauth;use think\captcha\Captcha;use think\Exception;use think\Db;/** * 前台用户登录 * * @author Administrator * */class Login extends BaseController{    public $user;    protected $userId;    public function __construct()    {        parent::__construct();        $this->init();    }    public function init()    {        $this->user = new User();        $this->userId = $this->user->getSessionUid();    }    public function dologin()    {        if (request()->isAjax()) {            $userMobile = request()->post('mobile', '');            $userPassword = request()->post('password', '');            //记住登录信息            $rememberme = request()->post('rememberme', '');            $retval = $this->user->login($userMobile, $userPassword,$rememberme);            if ($retval == 1) {//                if (! empty($_SESSION['login_pre_url'])) {//                    $returnData = [//                        'code' => 1,//                        'url' => $_SESSION['login_pre_url']//                    ];//                } else {//                    $returnData = [//                        'code' => 2,//                        'url' => '/'//                    ];//                }                //登录成功返回到首页                $returnData = [                    'code' => 2,                    'url' => '/website/shopSelection'                ];                result_success($returnData,"登录成功");            } else {                result_error( $retval, getErrorInfo($retval));            }        }        if( $this->userId ){            $this->redirect("/");        }        // 没有登录首先要获取上一页        $pre_url = '';        $_SESSION['bund_pre_url'] = '';        if (! empty($_SERVER['HTTP_REFERER'])) {            $pre_url = $_SERVER['HTTP_REFERER'];            $_SESSION['login_pre_url'] = $pre_url;        }        // 获取配置信息        $web_config = new WebConfig();        $loginConfig = $web_config->getLoginConfig();        $this->assign("loginConfig", $loginConfig);        $this->assign("title", "91AMZ 简单选品 选品简单 -- 登录");        return view( 'Login/login');    }    /**     * 注册账户     */    public function register()    {        if (request()->isAjax()) {            $mobile = request()->post('userMobile', '');            $mobile = empty($mobile) ? result_error(11111, '手机号不能为空！') : $mobile;            $password = request()->post('password', '');            $password = empty($password) ? result_error(11111, '密码不能为空！') : $password;            $verifyCode = request()->post('verifyCode', '');            $verifyCode = empty($verifyCode) ? result_error(11111, '验证码不能为空！') : $verifyCode;            $codeMobile = Session::get('codeMobile');            //获取分享ID            $inviteUserId = cookie('inviteUserId');            $inviteUserId = $inviteUserId ? $inviteUserId : 0;            //判断验证码是否正确            if( $verifyCode == $codeMobile['verify_code'] &&  $codeMobile['verify_time']+5*60 > time() ){                $count = $this->user->mobileIsRegister($mobile);                if ($count) {                    result_error(11111, '该手机号已注册！');                }                $data = [                    'userMobile' => $mobile,                    'userPassword' => substr(md5($password), 8, 16),                    'userStatus' => 1,                    'regTime' => time(),                    'loginCount' => 0,                    'regIp' => getIP(),                    'inviteUserId' => $inviteUserId,                    'qqOpenid' => "",                    'qqInfo' => "",                    'wxOpenid' => "",                    'wxInfo' => ""                ];                try {                    $res   = $this->user->addUser($data);                } catch (\Exception $ex) {                    return result_error(500,'用户注册失败');                }            } else {                result_error(11111, '验证码已过期或不正确！');            }            if ($res > 0) {                // 直接登录                $this->user->login($mobile, $password);                result_success($res,"注册成功");            }            else {                result_error(11111, '注册失败！');            }        } else {            if($this->userId){                $this->redirect("/");            }            //把sessionid存入数据库            $sessionId = uuid();            Session::set("regSession",$sessionId);            $lockSession = lock_url($sessionId);            $this->assign("lockSession",$lockSession);            $this->assign("title", "91AMZ 简单选品 选品简单 -- 用户注册");            return view( 'Login/register');        }    }    /**     * 第三方登录 qq、微信     */    public function oauthLogin()    {        $config = new WebConfig();        $type = request()->get('type', '');        if ($type == "WCHAT") {            $config_info = $config->getWchatConfig();            if (empty($config_info["configValue"]["APP_KEY"]) || empty($config_info["configValue"]["APP_SECRET"])) {                $this->error("当前系统未设置微信第三方登录!");            }            //微信手机端登录            if (isWeixin()) {                $this->wchatLogin();                if (! empty($_SESSION['login_pre_url'])) {                    $this->redirect($_SESSION['login_pre_url']);                } else {                    $redirect = "/website/Member/index";                    $this->redirect($redirect);                    $this->wchatbinding();                }            }        } else if ($type == "QQLOGIN") {            $config_info = $config->getQQConfig();            if (empty($config_info["configValue"]["APP_KEY"]) || empty($config_info["configValue"]["APP_SECRET"])) {                $this->error("当前系统未设置QQ第三方登录!");            }        }        $_SESSION['login_type'] = $type;        $test = ThinkOauth::getInstance($type);        $this->redirect($test->getRequestCodeURL());    }    /**     * qq登录返回     */    public function qqCallback()    {        $code = request()->get('code', '');        if (empty($code))            die();        $qq = ThinkOauth::getInstance('QQLOGIN');        $token = $qq->getAccessToken($code);        if (! empty($token['openid'])) {            if (! empty($_SESSION['bund_pre_url'])) {                // 1.检测当前qqopenid是否已经绑定，如果已经绑定直接返回绑定失败                $bund_pre_url = $_SESSION['bund_pre_url'];                $_SESSION['bund_pre_url'] = '';                $is_bund = $this->user->checkUserQQopenid($token['openid']);                if ($is_bund == 0) {                    // 2.绑定操作                    $qq = ThinkOauth::getInstance('QQLOGIN', $token);                    $data = $qq->call('user/get_user_info');                    Session::set( "qqInfo" , json_encode($data) );                    Session::set("qqOpenid",$token['openid'] );                    // 执行用户信息更新user服务层添加更新绑定qq函数（绑定，解绑）                    $res = $this->user->bindQQ($token['openid'], json_encode($data));                    // 如果执行成功执行跳转                    if ($res) {                        $this->success('绑定成功', $bund_pre_url);                    } else {                        $this->error('绑定失败', $bund_pre_url);                    }                } else {                    $this->error('该qq已经绑定', $bund_pre_url);                }            } else {                $retval = $this->user->qqLogin($token['openid']);                //未绑定                if ($retval == USER_NBUND) {                    $qq = ThinkOauth::getInstance('QQLOGIN', $token);                    $data = $qq->call('user/get_user_info');                    Session::set( "qqInfo" , json_encode($data) );                    Session::set("qqOpenid",$token['openid'] );//                    $result = $this->user->registerOauth('', '123456', '', $token['openid'], json_encode($data), '', '', '');//                    if ($result > 0) {//                        $redirect =  "/website/perfectInfo";//                        $this->redirect($redirect);//                    }                    $redirect =  "/website/perfectInfo";                    $this->redirect($redirect);                } else if ( $retval == USER_LOCK ){                    $this->error('该qq已经被锁定！');                }                // 已经绑定                if ($retval == 1) {                    //如果没有绑定手机号，直接跳转到绑定页面                    $userInfo = $this->user->getUserDetailByQq($token['openid']);                    if($userInfo['userMobile']){                        if (! empty($_SESSION['login_pre_url'])) {                            $this->redirect($_SESSION['login_pre_url']);                        } else {                            $redirect = "/website/member";                            $this->redirect($redirect);                        }                    } else {                        $redirect = "/website/perfectInfo";                        $this->redirect($redirect);                    }                }            }        }    }    /**     * 微信登录返回     */    public function wechatCallback(){        $code = request()->get('code', '');        if (empty($code))            $this->error('参数错误', "/website/login");        //校验state        $state = request()->get('state', '');        if( $state !=  Session::get("wx_state")){            $this->error('参数错误', "/website/login");        }        $wchat = ThinkOauth::getInstance('WCHAT');        $token = $wchat->getAccessToken($code);        //帐号已登录，绑定微信        if( $this->userId ){            $isBind = $this->user->getUserCountByUnionid($token['unionid']);            if ($isBind > 0) {                // 已经绑定，提示此微信已经绑定过了，请重新绑定                $this->error("此微信已经绑定过了","/website/member");            } else {                //绑定该用户                $wchat = ThinkOauth::getInstance('WCHAT', $token);                $data = $wchat->call('sns/userinfo');                Session::set("wxInfo" , json_encode($data) );                Session::set("wxUnionid" , $token['unionid'] );                //校验用户是否已经登录，如果登录但是未绑定微信，可以直接绑定，如果未登录直接注册                $result = $this->user->bindWeChat($this->userId,json_encode($data),$token['unionid']);                save_log("result:". $result,'scanBindWx');                if ($result > 0) {                    $redirect =  "/website/member";                    $this->redirect($redirect);                } else {                    $this->error("微信绑定失败","/website/member");                }            }        }        if (! empty($token['unionid'])) {            $retval = $this->user->wchatUnionLogin($token['unionid']);            // 已经绑定            if ($retval == 1) {                if (! empty($_SESSION['login_pre_url'])) {                    $this->redirect($_SESSION['login_pre_url']);                } else {                    $redirect = "/website/index";                    $this->redirect($redirect);                }            }        }        if ($retval == USER_NBUND) {            // 2.绑定操作            $wchat = ThinkOauth::getInstance('WCHAT', $token);            $data = $wchat->call('sns/userinfo');            Session::set("wxInfo" , json_encode($data) );            Session::set("wxUnionid" , $token['unionid'] );            save_log("userId:". $this->userId ."data:". json_encode($data),'wechatCallback');            //校验用户是否已经登录，如果登录但是未绑定微信，可以直接绑定，如果未登录直接注册            $redirect =  "/website/perfectInfo";            $this->redirect($redirect);        }        // 已经绑定        if ($retval == 1) {            //如果没有绑定手机号，直接跳转到绑定页面            $userInfo = $this->user->getUserDetailByQq($token['openid']);            if($userInfo['userMobile']){                if (! empty($_SESSION['login_pre_url'])) {                    $this->redirect($_SESSION['login_pre_url']);                } else {                    $redirect = "/website/member";                    $this->redirect($redirect);                }            } else {                $redirect = "/website/perfectInfo";                $this->redirect($redirect);            }        }    }    /**     * 退出登录     */    public function logout()    {        $this->user->Logout();        $redirect = "/website/login";        $this->redirect($redirect);    }    /**     * 找回密码     */    public function findPasswd()    {        if (request()->isAjax()) {            $mobile = request()->post('mobile', '');            //验证手机号是否存在            $exist = $this -> user -> mobileIsRegister($mobile);            if(!$exist){                result_error(11111, '该手机号未注册！');            } else {                result_success("","手机号正确");            }            return $exist;        }        $title = "91AMZ 简单选品 选品简单 -- 找回密码";        return view("Login/findPasswd",compact("title"));    }    /**     * @return \think\Response     * checkFindPasswdCode  校验找回密码手机验证码     */    public function checkFindPasswdCode()    {        if (request()->isAjax()) {            $smsCode = request()->post('send_param', '');            //验证手机号是否存在            $codeMobile = Session::get('codeMobile');            if ( $smsCode == $codeMobile['verify_code'] &&  $codeMobile['verify_time']+5*60 > time() ){                result_success("", '手机验证码正确！');            } else {                result_error(11111, '手机验证码错误！');            }        }    }    /*     * 校验验证码     */    public function checkCaptcha()    {        if (request()->isAjax()) {            $verifyCode = request()->post('vertification', '');            //验证验证码是否正确            $captcha = new Captcha();            if( !$captcha->check($verifyCode) )            {                // 验证失败                result_error(11111, '验证码错误！');            }            else {                result_success("", '验证码正确！');            }        }    }    //生成验证码    public function verify()    {        $captcha = new Captcha(config("captcha"));        return $captcha->entry();    }    /*     * 修改密码     */    public function passwdReset()    {        if (request()->isAjax()) {            $mobile = request()->post('mobile', '');            $password = request()->post('password', '');            $code = request()->post('code', '');            $type = request()->post('type', '');            $codeMobile = Session::get("codeMobile");            if ($mobile != $codeMobile['verify_mobile']) {                result_error(11111, '该手机号与验证手机不符！');            } else if ( $code != $codeMobile['verify_code']){                result_error(11111, '验证码不正确！');            } else if ( time() > $codeMobile['verify_time']+5*60){                result_error(11111, '验证码已过期！');            } else if ( $type != $codeMobile['verify_type']){                result_error(11111, '验证码类型不匹配！');            } else {                $res = $this->user->updateUserInfoByMobile($mobile, $password);                if($res){                    Session::delete("codeMobile");                    result_success("", '密码重置成功！');                } else {                    result_error(11111, '密码重置失败！');                }            }        }    }    /**     * 完善用户资料     */    public function perfectInfo()    {        $wxInfo = Session::get("wxInfo");        $wxUnionid = Session::get("wxUnionid");        $qqInfo = Session::get("qqInfo");        $qqOpenid = Session::get("qqOpenid");        //获取扫码公众号登录        $ticket = request()->get('ticket', '');        $weixinInfo = Cache::get($ticket."_weixinInfo" ,'');        //校验是否已经登录//        if(!$this->user->getSessionUid()){//            $this->redirect("/website/login");//        }        //$userInfo = $this->user->getUserInfo();        if($this->userId){            $this->redirect("/website/member");        } else if ( ($wxInfo && $wxUnionid)  ||  ($qqInfo && $qqOpenid) || $weixinInfo){            $title = "91AMZ 简单选品 选品简单 -- 完善信息";            return view("Login/perfectInfo", compact("title",'ticket'));        } else {            $this->redirect("/website/login");        }//        if( $userInfo['userMobile'] ){//            $redirect = "/";//            $this->redirect($redirect);//        }    }    /**     * 绑定手机号     */    public function bindMobile(){        if (request()->isAjax()) {            $userMobile = request()->post('mobile', '');            $verifyCode  = request()->post('captcha', '');            $password  = request()->post('password', '');            $smsCode  = request()->post('codeMobile', '');            $codeMobile = Session::get('codeMobile');            $type = request()->post('type','');//1完善手机号 2绑定现有手机号            //校验验证码是否正确            $captcha = new Captcha();            if( !$captcha->check($verifyCode) )            {                // 验证失败                result_error(111121, '校验码错误！');            }            if(!$type){                result_error(100000, '参数错误！');            }            //取消pc扫码登录，改成关注公众号登录//            $wxInfo = Session::get("wxInfo");////            $wxUnionid = Session::get("wxUnionid");            $qqInfo = Session::get("qqInfo");            $qqOpenid = Session::get("qqOpenid");            //$userId = $this->user->getSessionUid();            $ticket = request()->post('ticket', '');            $weixinInfo = Cache::get($ticket."_weixinInfo" );            $wxData = json_decode($weixinInfo,true);            //校验手机验证码是否正确            if ($userMobile != $codeMobile['verify_mobile']) {                result_error(111122, '该手机号与验证手机不符！');            } else if ( $smsCode != $codeMobile['verify_code']){                result_error(111122, '手机验证码不正确！');            } else if ( time() > $codeMobile['verify_time']+5*60){                result_error(111122, '手机验证码已过期！');            }            //校验手机号是否已注册            $count = $this->user->mobileIsRegister($userMobile);            if($type==1){                if ( "perfect" != $codeMobile['verify_type']){                    result_error(111122, '手机验证码类型不匹配！');                }                //完善资料                if ($count) {                    result_error(111111, '该手机号已注册，请切换到已有帐号绑定！');                }                //绑定手机号                //绑定用户手机号//                if( $wxInfo && $wxUnionid ){//                    $res = $this->user->registerOauth($userMobile, $password, "", "", "", "", $wxInfo, $wxUnionid);//                } else                if( $qqInfo && $qqOpenid ){                    $res = $this->user->registerOauth($userMobile, $password, "", $qqOpenid, $qqInfo, "", "", "");                } else if ($weixinInfo){                    $res = $this->user->registerOauth($userMobile, $password, "", "", "", $wxData['openid'], $weixinInfo, "");                }            } else if($type==2) {                if ( "bindMobile" != $codeMobile['verify_type']){                    result_error(111122, '手机验证码类型不匹配！');                }                if (!$count) {                    result_error(111111, '该手机号未注册，请切换到完善资料！');                }                //校验密码是否正确                if(!$this->user->checkPasswd($password)){                    result_error(111123, "密码不正确！");                }//                if( $wxInfo && $wxUnionid ){//                    $res = $this->user->mobileBindOauth($userMobile, $password, '', '', "", $wxInfo, $wxUnionid);//                } else                if( $qqInfo && $qqOpenid ){                    $res = $this->user->mobileBindOauth($userMobile, $password, $qqOpenid, $qqInfo, "", '', '');                } else if ($weixinInfo){                    $res = $this->user->mobileBindOauth($userMobile, $password, '', '', $wxData['openid'], $weixinInfo, "");                }                if($res){                    $this->user->login($userMobile, $password);                }            }            //绑定用户手机号            //$res = $this->user->updateUserMobileByUserid($userId , $userMobile , $password);            //save_log("mobile:". $userMobile ."password:". $password,'bindMobile');            if($res){                Session::delete("codeMobile");                result_success(["url"=>"/website/index"], '手机号绑定成功！');            } else {                result_error(11111, '手机号绑定失败！');            }        }    }    /**     * 校验手机号     */    public function checkMobile(){        if (request()->isAjax()) {            $mobile = request()->post('mobile', '');            $count = $this->user->mobileIsRegister($mobile);            if ($count) {                result_success(111131, '该手机号已注册，请切换到已有帐号绑定！');            } else {                result_success(111132, '该手机号未注册，请切换到完善信息！');            }        }    }    /**     * 生成state     */    public function createState(){        $state  = md5(uniqid(rand(), TRUE));        Session::set("wx_state" , $state);//存到SESSION        return $state;    }    /**     * 微信扫码公众号登录     */    public function wxLogin(){        $ticket = request()->get('ticket', '');        $ticketArr = Cache::get($ticket ,'');        $res = $this -> user -> wchatLogin($ticketArr['openid']);        if ($res == 1) {            $this->redirect("/website/member");        } else {            result_error( $res, getErrorInfo($res));        }    }}