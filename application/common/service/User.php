<?php/** * Created by PhpStorm. * UserModel: chenyouxi * Date: 2019/5/27 * Time: 5:07 PM */namespace app\common\service;use think\facade\Session as Session;use think\facade\Cookie as Cookie;use think\facade\Cache;use app\common\service\BaseService as BaseService;use app\common\model\UserModel as UserModel;use app\common\model\LoginLogModel as LoginLogModel;use app\common\service\Config as WebConfig;use app\common\model\BaseModel;use think\Db;class User extends BaseService{    function __construct()    {        parent::__construct();        $this->user = new UserModel();        $this->loginLog = new LoginLogModel();    }    /**     * 通过微信openid获取会员信息通过Openid     */    public function getUserDetailByWx($wxOpenid)    {        $user_info = $this->user->getInfo(['wxOpenid'=>$wxOpenid],'userId,userMobile,nickName');        return $user_info;    }    /**     * 通过微信openid获取会员信息通过Openid     */    public function getUserDetailByQq($qqOpenid)    {        $user_info = $this->user->getInfo(['qqOpenid'=>$qqOpenid],'userId,userMobile,nickName');        return $user_info;    }    /**     *     * @return unknown     */    public function getUserInfo($field="*")    {        $res = $this->user->getInfo('userId=' . $this->userId, $field);        return $res;    }    /**     * (non-PHPdoc)     * @see     */    public function getUserInfoByUid($userId)    {        $res = $this->user->getInfo('userId=' . $userId, '*');        return $res;    }    /**     * 根据手机号获取用户信息     */    public function getUserInfoByMobile($userMobile)    {        $res = $this->user->getInfo(['userMobile'=>$userMobile],'*');        return $res;    }    /**     * 根据手机号修改密码     */    public function  updateUserInfoByMobile($userMobile,$userPassword)    {        $data = [            'userPassword' => substr(md5($userPassword), 8, 16)        ];        $retval = db('user')->where('userMobile', $userMobile)->update($data);        return $retval;    }    /**     * 根据用户id修改密码     */    public function  updateUserInfoByUserid($userId,$userPassword)    {        $data = [            'userPassword' => substr(md5($userPassword), 8, 16)        ];        $retval = db('user')->where('userId', $userId)->update($data);        return $retval;    }    /**     * 编辑用户信息     *     */    public function updateUserInfo( $nickName,$userEmail,$userQQ,$userLocation,$userBirthday ){        $data = [            'nickName' => $nickName,            'userEmail' => $userEmail,            'userQQ' => $userQQ,            'userLocation' => $userLocation,            'userBirthday' => $userBirthday        ];        $retval = db('user')->where('userId', $this->userId)->update($data);        return $retval;    }    /**     * 根据用户id绑定手机号和修改密码     */    public function updateUserMobileByUserid( $userId, $mobile , $password){        $data = array(            'userMobile' => $mobile,            'userPassword' => substr(md5($password), 8, 16)        );        $retval = db('user')->where('userId', $userId)->update($data);        return $retval;    }    /**     * 修改、绑定手机号     */    public function updateUserMobile($userId,$mobile){        $data = array(            'userMobile' => $mobile        );        $retval = db('user')->where('userId', $userId)->update($data);        return $retval;    }    /**     * 根据用户id修改用户头像     */    public function updateUserFace(  $userFace ){        $data = array(            'userFace' => $userFace        );        $retval = db('user')->where('userId', $this->userId)->update($data);        return $retval;    }    /**     * 获取当前登录用户的userId     */    public function getSessionUid()    {        return $this->userId;    }    /**     * 获取当前登录用户的手机号     *     */    public function getSessionMobile()    {        return $this->userMobile;    }    /**     * 系统用户登录     *     * @param unknown $mobile     * @param unknown $userPassword     */    public function login($userMobile, $userPassword = '',$rememberme = '')    {        $this->Logout();        if($rememberme){            Cookie::set('userMobile', $userMobile,3600);            Cookie::set('userPassword', $userPassword,3600);        }        $condition = array(            'userMobile' => $userMobile,            'userPassword' => substr(md5($userPassword), 8, 16),        );        $user_info = $this->user->getInfo($condition, "userStatus,userId,userMobile,loginCount");        if (! empty($user_info)) {            if ($user_info['userStatus'] == "-1") {                return USER_LOCK;            } else {                //登录成功后增加用户的登录次数                $this->initLoginInfo($user_info);                return 1;            }        } else            return USER_ERROR;    }    /**     * 用户登录之后初始化数据     * @param unknown $user_info     */    private function initLoginInfo($userInfo)    {        Session::set('userId', $userInfo['userId']);        Session::set('userMobile', $userInfo['userMobile']);        createSessionID($userInfo['userId']); //创建登录Session        $data = array(            'lastLoginTime' => time(),            'loginCount' => $userInfo['loginCount']+1        );        //更新用户登录        $retval = db('user')->where('userId', $userInfo['userId'])->update($data);        //写入登录日志表        $inData = [            "userId" => $userInfo['userId'],            "userIp" => getIP(),            "loginDate" => time(),            "loginTime" => time()        ];        $this->loginLog->insertGetId($inData);        return $retval;    }    /*     * qq登录     *     */    public function qqLogin($qq)    {        $this->Logout();        $condition = array(            'qqOpenid' => $qq        );        $user_info = $this->user->getInfo($condition, "*");        if (! empty($user_info)) {            if ($user_info['userStatus'] == "-1") {                return USER_LOCK;            } else {                $this->initLoginInfo($user_info);                return 1;            }        } else            return USER_NBUND;        // TODO Auto-generated method stub    }    /*     * 微信第三方登录(non-PHPdoc)     *     */    public function wchatLogin($openid)    {        $this->Logout();        $condition = array(            'wxOpenid' => $openid        );        $user_info = $this->user->getInfo($condition, '*');        if (! empty($user_info)) {            if ($user_info['userStatus'] == "-1") {                return USER_LOCK;            } else {                $this->initLoginInfo($user_info);                return 1;            }        } else            return USER_NBUND;        // TODO Auto-generated method stub    }    /**     * 判断openid 在数据库中存不存在     * @param unknown $openid     */    public function getUserCountByOpenid($openid){        $condition = array(            'wxOpenid' => $openid        );        $user_count = $this->user->getCount($condition);        return $user_count;    }    /**     * 判断unionid 在数据库中存不存在     * @param unknown $unionid     */    public function getUserCountByUnionid($unionid){        $condition = array(            'wxUnionid' => $unionid        );        $user_count = $this->user->getCount($condition);        return $user_count;    }    /**     * 微信unionid登录(non-PHPdoc)     * @see     */    public function wchatUnionLogin($unionid)    {        //$this->Logout();        $condition = array(            'wxUnionid' => $unionid        );        $user_info = $this->user->getInfo($condition, "*");        if (! empty($user_info)) {            if ($user_info['userStatus'] == "-1") {                return USER_LOCK;            } else {                $this->initLoginInfo($user_info);                return 1;            }        } else            return USER_NBUND;    }    /**     * 过滤特殊字符     * @param unknown $str     */    private function filterStr($str)    {        if($str){            $name = $str;            $name = preg_replace_callback('/\xEE[\x80-\xBF][\x80-\xBF]|\xEF[\x81-\x83][\x80-\xBF]/',function ($matches) { return '';}, $name);            $name = preg_replace_callback('/xE0[x80-x9F][x80-xBF]‘.‘|xED[xA0-xBF][x80-xBF]/S',function ($matches) { return '';}, $name);            // 汉字不编码            $name = json_encode($name);            $name = preg_replace_callback("/\\\ud[0-9a-f]{3}/i", function ($matches) { return '';}, $name);            if(!empty($name))            {                $name = json_decode($name);                return $name;            }else{                return '';            }        }else{            return '';        }    }    /**     * 用户退出     */    public function Logout()    {        Session::set('userId', '');        Session::set('userMobile', '');    }    /*     * 验证手机号是否已经注册     */    public function mobileIsRegister($mobile)    {        $mobile_info = $this->user->get([            'userMobile' => $mobile        ]);        return !empty($mobile_info);    }    /*     * 验证密码是否正确     */    public function checkPasswd($userPassword)    {        $userInfo = $this->user->get([            'userPassword' => substr(md5($userPassword), 8, 16)        ]);        return !empty($userInfo);    }    /*     * 添加会员     */    public function addUser($data)    {        $res = $this -> user -> insertGetId($data);        if($res){            //注册成功赠送积分            $this -> backIntegral("reg","注册赠送积分",$res);        }        return !empty($res) ? $res : false;    }    /*     * 校验该QQ号是否已经绑定     */    public function checkUserQQopenid($qqOpenid)    {        $user = new UserModel();        return $user->where(['qqOpenid' => $qqOpenid])->count();    }    /*     * 校验该微信号是否已经绑定     */    public function checkUserWechatOpenid($qqOpenid)    {        $user = new UserModel();        return $user->where(['wechatOpenid' => $qqOpenid])->count();    }    /*     * 绑定QQ     */    public function bindQQ($qqOpenid, $qqInfo)    {        $data = array(            'qqOpenid' => $qqOpenid,            'qqInfo' => $qqInfo        );        $res = $this->user->save($data, ['userId' => $this->userId]);        return $res;    }    /**     * 绑定微信     */    public function bindWeChat($userId,$wxInfo,$wxUnionid){        $wxInfoArray = json_decode($wxInfo);        $nickName = $this->filterStr($wxInfoArray->nickname);        $userFace = $wxInfoArray->headimgurl;        $wxInfo = $this->filterStr($wxInfo);        if(!empty($userFace))        {            if(!file_exists('upload/user')){                $mode = intval('0777',8);                mkdir('upload/user',$mode,true);                if(!file_exists('upload/user'))                {                    die('upload/user不可写，请检验读写权限!');                }            }            $local_path = 'upload/user/'.time().rand(111,999).'.png';            save_weixin_img($local_path, $userFace);        }        $res = $this -> user -> where(["userId"=>$userId]) -> update(["nickName"=>$nickName,"userFace"=>$userFace,"wxInfo"=>$wxInfo,"wxUnionid"=>$wxUnionid]);        return $res;    }    /**     * 第三方绑定手机号     */    public function mobileBindOauth($mobile, $password, $qqOpenid, $qqInfo, $wxOpenid, $wxInfo, $wxUnionid){        $saveData = [];        if (! empty($qqOpenid)) {            $qqInfoArray = json_decode($qqInfo);            $nickName = $this->filterStr($qqInfoArray->nickname);            $userFace = $qqInfoArray->figureurl_qq_2;            $qqInfo = $this->filterStr($qqInfo);            $saveData['userLocation'] = $qqInfoArray->province . $qqInfoArray->city;        } elseif (! empty($wxOpenid) || !empty($wxUnionid)) {            $wxInfoArray = json_decode($wxInfo);            $nickName = $this->filterStr($wxInfoArray->nickname);            $userFace = $wxInfoArray->headimgurl;            $wxInfo = $this->filterStr($wxInfo);            $saveData['userLocation'] = $wxInfoArray->province . $wxInfoArray->city;            $saveData['isFollow'] = 1;        } else {            $userFace = '';        }        $local_path = '';        if(!empty($userFace))        {            if(!file_exists('upload/user')){                $mode = intval('0777',8);                mkdir('upload/user',$mode,true);                if(!file_exists('upload/user'))                {                    die('upload/user不可写，请检验读写权限!');                }            }            $local_path = 'upload/user/'.time().rand(111,999).'.png';            save_weixin_img($local_path, $userFace);        }        $saveData['userPassword'] = substr(md5($password), 8, 16);        $saveData['qqOpenid'] = $qqOpenid;        $saveData['qqInfo'] = $qqInfo;        $saveData['wxOpenid'] = $wxOpenid;        $saveData['wxInfo'] = $wxInfo;        $saveData['nickName'] = $nickName;        $saveData['userFace'] = $userFace;        $saveData['wxUnionid'] = $wxUnionid;        $res = $this -> user -> where(["userMobile"=>$mobile]) -> update($saveData);        return $res;    }    /**     * 用户注册     *     */    public function registerOauth($mobile, $password, $email, $qqOpenid, $qqInfo, $wxOpenid, $wxInfo, $wxUnionid){        $saveData = [];            if (! empty($qqOpenid)) {                $qqInfoArray = json_decode($qqInfo);                $nickName = $this->filterStr($qqInfoArray->nickname);                $userFace = $qqInfoArray->figureurl_qq_2;                $qqInfo = $this->filterStr($qqInfo);                $saveData['userLocation'] = $qqInfoArray->province . $qqInfoArray->city;            } elseif (! empty($wxOpenid) || !empty($wxUnionid)) {                $wxInfoArray = json_decode($wxInfo);                $nickName = $this->filterStr($wxInfoArray->nickname);                $userFace = $wxInfoArray->headimgurl;                $wxInfo = $this->filterStr($wxInfo);                $saveData['userLocation'] = $wxInfoArray->province . $wxInfoArray->city;                $saveData['isFollow'] = 1;            } else {                $userFace = '';            }            $local_path = '';            if(!empty($userFace))            {                if(!file_exists('upload/user')){                    $mode = intval('0777',8);                    mkdir('upload/user',$mode,true);                    if(!file_exists('upload/user'))                    {                        die('upload/user不可写，请检验读写权限!');                    }                }                $local_path = 'upload/user/'.time().rand(111,999).'.png';                save_weixin_img($local_path, $userFace);            }            //获取分享ID            $inviteUserId = Cookie::get('inviteUserId');            $inviteUserId = $inviteUserId ? $inviteUserId : 0;        $saveData = [                'userMobile' => $mobile,                'userPassword' => substr(md5($password), 8, 16),                'userStatus' => 1,                'regTime' => time(),                'loginCount' => 0,                'regIp' => getIP(),                'inviteUserId' => $inviteUserId,                'qqOpenid' => $qqOpenid,                'qqInfo' => $qqInfo,                'wxOpenid' => $wxOpenid,                'wxInfo' => $wxInfo,                'nickName' => $nickName,                'userFace' => $userFace,                'wxUnionid' => $wxUnionid            ];            try {                $res   = $this->addUser($saveData);            } catch (\Exception $ex) {                $this->error('用户注册失败');            }        if ($res > 0) {            // 直接登录            if (! empty($qqOpenid)) {                $this->qqLogin($qqOpenid);            } elseif (! empty($wxOpenid)) {                $this->wchatLogin($wxOpenid);            } elseif (! empty($wxUnionid)) {                $this->wchatUnionLogin($wxUnionid);            }        }        return $res;    }    /**     * 手机号验证码校验     */    public function checkMobileVerify( $mobile , $verify ,$type ){        $codeMobile = Session::get("codeMobile");        if ($mobile != $codeMobile['verify_mobile']) {            return "该手机号与验证手机不符";        } else if ( $verify != $codeMobile['verify_code']){            return "验证码不正确！";        } else if ( time() > $codeMobile['verify_time']+5*60){            return "验证码已过期！";        } else if ( $type != $codeMobile['verify_type']){            return "验证码类型不匹配!";        } else {            return 200;        }    }    /**     * 消费积分     */    public function consumption($type,$remark=""){        $web_config = new WebConfig();        switch($type){            case "sellerInfo":                //获取查看商家信息详情和商品信息所需积分                $config = $web_config->getSellerInfoConfig();                $integralType = 6;                break;            case "sellerFilter":                //获取卡位商家所需积分                $config = $web_config->getFilterSellerConfig();                $integralType = 5;                break;            case "productInfo":                //获取商品详情                $config = $web_config->getProductInfoConfig();                $integralType = 7;                break;            case "sellerProductList":                $config = $web_config->getSellerProductListConfig();                $integralType = 9;                break;                default;        }        $user_info = $this->user->getInfo(['userId'=>$this->userId],'integral');        if($config['configValue'] > $user_info['integral']){            return false;        }        if( $config['configValue'] > 0 ){            Db::startTrans();            try {                $newdata['userId'] = $this->userId;                $newdata['integralType'] = $integralType;                $newdata['amount'] = -$config['configValue'];                $newdata['addTime'] = time();                $newdata['remark'] = $remark;                $newdata['surplus'] = bcsub($user_info['integral'] , $config['configValue']);                db('integral')->insert($newdata);                //更新用户积分                db('user')->where('userId', $this->userId)->setDec("integral",$config['configValue']);                Db::commit();            } catch (Exception $exception) {                Db::rollback();            }        }        return true;    }    /**     * 添加积分，默认查无结果回退积分     */    public function backIntegral($type,$remark="查无结果，返还积分",$userId=''){        $web_config = new WebConfig();        if($userId){            $this->userId = $userId;        }        switch($type){            case "sellerInfo":                //获取查看商家信息详情和商品信息所需积分                $config = $web_config->getSellerInfoConfig();                $integralType = 6;                break;            case "sellerFilter":                //获取卡位商家所需积分                $config = $web_config->getFilterSellerConfig();                $integralType = 5;                break;            case "productInfo":                //获取商品详情                $config = $web_config->getProductInfoConfig();                $integralType = 7;                break;            case "sellerProductList":                $config = $web_config->getSellerProductListConfig();                $integralType = 9;                break;            case "reg":                $config = $web_config->getRegConfig();                $integralType = 1;                break;            default;        }        $user_info = $this->user->getInfo(['userId'=>$this->userId],'integral');        if($config['configValue'] > 0){            Db::startTrans();            try {                $newdata['userId'] = $this->userId;                $newdata['integralType'] = $integralType;                $newdata['amount'] = $config['configValue'];                $newdata['addTime'] = time();                $newdata['remark'] = $remark;                $newdata['surplus'] = bcadd($user_info['integral'] , $config['configValue']);                db('integral')->insert($newdata);                //更新用户积分                db('user')->where('userId', $this->userId)->setInc("integral",$config['configValue']);                Db::commit();            } catch (Exception $exception) {                Db::rollback();            }        }        return true;    }    /**     * 更新用户资料     */    public function updateUser($where,$array){        $res = $this -> user            -> where($where)            -> update($array);        return $res;    }    /**     * 获取推荐的用户总数     */    public function getInviteCount(){        $condition = array(            'inviteUserId' => $this->userId        );        $count = $this->user->getCount($condition);        return $count;    }    /**     * 获取已绑定关注公众号的用户数量     */    public function getCountWxUser(){        $condition = [];        $condition[] = ['wxOpenid','neq',''];        $count = $this->user->getCount($condition);        return $count;    }    /**     * 获取用户列表     *     */    public function getList($page_index, $page_size, $condition, $order,$field){        $list = $this->user->pageQuery($page_index, $page_size, $condition, $order, $field);        return $list;    }}