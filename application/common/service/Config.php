<?php/** * Created by PhpStorm. * UserModel: chenyouxi * Date: 2019/5/27 * Time: 2:28 PM */namespace app\common\service;/** * 系统配置业务层 */use Qiniu\json_decode;use think\facade\Cache as Cache;use think\Config as ThinkPHPConfig;use think\Db;use app\common\service\BaseService as BaseService;use app\common\model\ConfigModel as ConfigModel;class Config extends BaseService{    private $config_module;    function __construct()    {        parent::__construct();        $this->config_module = new ConfigModel();    }    /*     * (non-PHPdoc)     *     */    public function getWchatConfig()    {        $wchat_config = Cache::get("wchat_config" );        if (empty($wchat_config) || !$wchat_config['configValue']['APP_KEY'] ) {            $info = $this->config_module->getInfo([                'configName' => 'WCHAT'            ], 'configValue');            if (empty($info['configValue'])) {                $wchat_config = "";            } else {                $info['configValue'] = json_decode($info['configValue'], true);                $wchat_config = $info;            }            Cache::set("wchat_config", $wchat_config);        }        return $wchat_config;    }    /*     * (non-PHPdoc)     *     */    public function getQQConfig()    {        $qq_config = Cache::get("qq_config" );        if ( empty($qq_config) || !$qq_config['configValue'] ) {            $info = $this->config_module->getInfo([                'configName' => 'QQLOGIN'            ], 'configValue');            if (empty($info['configValue'])) {                $qq_config = "";            } else {                $info['configValue'] = json_decode($info['configValue'], true);                $qq_config = $info;            }            Cache::set("qq_config" , $qq_config);        }        return $qq_config;    }    public function getLoginConfig()    {        $wchat_config = $this->getWchatConfig();        $qq_config = $this->getQQConfig();        $mobile_config = $this->getMobileMessage();        $email_config = $this->getEmailMessage();        $data = array(            'wchat_login_config' => $wchat_config,            'qq_login_config' => $qq_config,            'mobile_config' => $mobile_config,            'email_config' => $email_config        );        return $data;    }    /**     * 获取积分充值规则     */    public function getRechargeConfig(){        $info = $this->config_module->getInfo([            'configName' => 'integral_rate'        ], 'configValue');        $info['configValue'] = json_decode($info['configValue'], true);        $data = $info;        return $data;    }    /**     * 用户注册赠送积分     */    public function getRegConfig(){        $info = $this->config_module->getInfo([            'configName' => 'integral_reg_give'        ], 'configValue');        $info['configValue'] = json_decode($info['configValue'], true);        $data = $info;        return $data;    }    /**     * 获取商家信息积分消费规则     */    public function getSellerInfoConfig(){        $info = $this->config_module->getInfo([            'configName' => 'integral_get_seller'        ], 'configValue');        $info['configValue'] = json_decode($info['configValue'], true);        $data = $info;        return $data;    }    /**     * 筛选商家列表积分消费规则     */    public function getFilterSellerConfig(){        $info = $this->config_module->getInfo([            'configName' => 'integral_filter_seller'        ], 'configValue');        $info['configValue'] = json_decode($info['configValue'], true);        $data = $info;        return $data;    }    /**     * 获取商家的商品列表     */    public function getSellerProductListConfig(){        $info = $this->config_module->getInfo([            'configName' => 'integral_get_sellerProductList'        ], 'configValue');        $info['configValue'] = json_decode($info['configValue'], true);        $data = $info;        return $data;    }    /**     * 查看商品详情积分消费规则     */    public function getProductInfoConfig(){        $info = $this->config_module->getInfo([            'configName' => 'integral_get_productInfo'        ], 'configValue');        $info['configValue'] = json_decode($info['configValue'], true);        $data = $info;        return $data;    }    /**     *     * @ERROR!!!     *     */    public function getMobileMessage()    {        $cache = Cache::get("getMobileMessage" );        if (empty($cache)) {            $info = $this->config_module->getInfo([                'configName' => 'MOBILEMESSAGE'            ], 'configValue');            if (empty($info['configValue'])) {                $data = array(                    'configValue' => array(                        'appKey' => '',                        'secretKey' => '',                        'freeSignName' => ''                    )                );            } else {                $info['configValue'] = json_decode($info['configValue'], true);                $data = $info;            }            Cache::set("getMobileMessage" , $data);            return $data;        } else {            return $cache;        }    }    /**     *     * @ERROR!!!     */    public function getEmailMessage()    {        $cache = Cache::get("getEmailMessage" );        if (empty($cache)) {            $info = $this->config_module->getInfo([                'configName' => 'EMAILMESSAGE'            ], 'configValue');            if (empty($info['configValue'])) {                $data = array(                    'configValue' => array(                        'email_host' => '',                        'email_port' => '',                        'email_addr' => '',                        'email_pass' => '',                        'email_id' => '',                        'email_is_security' => false                    )                );            } else {                $info['configValue'] = json_decode($info['configValue'], true);                $data = $info;            }            Cache::set("getEmailMessage" , $data);            return $data;        } else {            return $cache;        }    }}