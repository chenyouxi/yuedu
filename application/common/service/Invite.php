<?php/** * Created by PhpStorm. * User: chenyouxi * Date: 2019/6/4 * Time: 1:46 PM */namespace app\common\service;use think\facade\Session as Session;use think\facade\Cookie as Cookie;use think\facade\Cache;use app\common\model\UserModel as UserModel;use app\common\service\Config as WebConfig;use app\common\service\BaseService as BaseService;use app\common\model\InviteModel as InviteModel;use app\common\model\IntegralModel as IntegralModel;use think\Db;class Invite extends BaseService{    function __construct()    {        parent::__construct();        $this->invite = new InviteModel();        $this->user  = new UserModel();    }    public function isStatus($tradeNo){        $iStatus = $this->invite->getInfo(['tradeNo'=>$tradeNo],'iStatus');        return $iStatus;    }    public function useTrade($tradeNo,$userId,$userMobile,$price){        $web_config = new WebConfig();        $config = $web_config->getRechargeConfig();        $user_info = $this->user->getInfo(['userId'=>$userId],'integral');        Db::startTrans();        try {            // 更新订单数据            db('invite')->where('tradeNo', $tradeNo)                ->update([                    'iStatus' => 1,                    'useTime' => time(),                    'isSend' => 1,                    'userMobile' => $userMobile                ]);            $newdata['userId'] = $userId;            $newdata['integralType'] = 0;            $newdata['amount'] = bcmul($price , $config['configValue']);            $newdata['price'] = $price;            $newdata['addTime'] = time();            $newdata['remark'] = $tradeNo;            $newdata['surplus'] = bcadd($user_info['integral'] , $newdata['amount']);            $res = db('integral')->insert($newdata);            //更新用户积分            db('user')->where('userId', $userId)->setInc("integral",bcmul($price , $config['configValue']));            Db::commit();        } catch (Exception $exception) {            Db::rollback();        }        return $res;    }    public function getInviteInfo($tradeNo){        $info = $this->invite->getInfo(['tradeNo'=>$tradeNo],'iStatus,tradePrice');        return $info;    }    public function getList($page_index, $page_size, $condition, $order,$field="*"){        $list = $this->invite->pageQuery($page_index, $page_size, $condition, $order, $field);        return $list;    }}