<?php/** * * +---------------------------------------------------------------------- *                      .::::. *                    .::::::::.            | AUTHOR: chenyouxi *                    :::::::::::           | EMAIL: 905100794@qq.com *                 ..:::::::::::'           | QQ: 905100794 *             '::::::::::::'               | WECHAT: xi20130618 *                .::::::::::               | DATETIME: 2019/7/30 11:50 AM *           '::::::::::::::.. *                ..::::::::::::. *              ``:::::::::::::::: *               ::::``:::::::::'        .:::. *              ::::'   ':::::'       .::::::::. *            .::::'      ::::     .:::::::'::::. *           .:::'       :::::  .:::::::::' ':::::. *          .::'        :::::.:::::::::'      ':::::. *         .::'         ::::::::::::::'         ``::::. *     ...:::           ::::::::::::'              ``::. *   ```` ':.          ':::::::::'                  ::::.. *                      '.:::::'                    ':'````.. * +---------------------------------------------------------------------- */use app\common\model\UserTypeModel as UserType;/** * 生成页码跳转 * @param int $page_size 每页显示的数量 * @return string */function page_size($page_size = 0, $total = 0){    $str  = '<select class="form-control page_size">';    for ($i = 10; $i <= 100; $i += 10) {        $selected = $page_size==$i? 'selected':'';        $str .= '<option value="'.$i.'" '.$selected.' >'.$i.' 条/页</option>';    }    $str .= '</select>';    if ($total > 0) {        $str .= '<span class="form-control page_total">总共 '.$total.' 条记录</span>';    }    return $str;}/** * 空数据提示 * @param int $num * @return string */function empty_list($num = 10){    $empty = "<tr><td colspan='".$num."' align='center'>暂无数据</td></tr>";    return $empty;}/** * 权限设置选中状态 * @param $cate  栏目 * @param int $pid 父ID * @param $rules 规则 * @return array */function auth($cate , $pid = 0,$rules){    $arr = array();    $rulesArr = explode(',',$rules);    foreach ($cate as $v){        if ($v['pid'] == $pid) {            if (in_array($v['autoId'], $rulesArr)) {                $v['checked'] = true;            }            $v['open'] = true;            $arr[]=$v;            $arr = array_merge($arr, auth($cate, $v['autoId'], $rules));        }    }    return $arr;}/** * 无限分类-权限 * @param $cate            栏目 * @param string $lefthtml 分隔符 * @param int $pid         父ID * @param int $lvl         层级 * @return array */function tree($cate , $lefthtml = '|— ' , $pid = 0 , $lvl = 0 ){    $arr = array();    foreach ($cate as $v){        if ($v['pid'] == $pid) {            $v['lvl']      = $lvl + 1;            $v['lefthtml'] = str_repeat($lefthtml,$lvl);            $v['ltitle']   = $v['lefthtml'].$v['title'];            $arr[] = $v;            $arr = array_merge($arr, tree($cate, $lefthtml, $v['autoId'], $lvl+1));        }    }    return $arr;}/** * PHP格式化字节大小 * @param  number $size      字节数 * @param  string $delimiter 数字和单位分隔符 * @return string            格式化后的带单位的大小 */function format_bytes($size, $delimiter = '') {    $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB');    for ($i = 0; $size >= 1024 && $i < 5; $i++) $size /= 1024;    return round($size, 2) . $delimiter . $units[$i];}/*** * 日期筛选格式化 * @param $dateran * @return array */function get_dateran($dateran){    if ($dateran) {        $dateran = explode(" 至 ",$dateran);    }    if (is_array($dateran) && count($dateran) == 2) {        $dateran[0] = strtotime($dateran[0]);        $dateran[1] = strtotime($dateran[1])+24*60*60-1;    }    return $dateran;}/** * 获取用户分组 */function get_userType($id){    $userType = UserType::find(["autoId"=>$id]);    return $userType;}/** * 获取目录里的文件，不包括下级文件夹 * @param string $dir  路径 * @return array */function get_dir($dir){    $file = @ scandir($dir);    foreach ($file as $key){        if ( $key != ".." && $key != "." ){            $files[] = $key;        }    }    return $files;}/** * 格式化系统设置表中的setup数据 * @param $system * @return mixed */function sysgem_setup($system){    foreach ($system as $k => $v) {        if ($system[$k]['setup']) {            $system[$k]['setup'] = string2array($v['setup']);            if (array_key_exists('options', $system[$k]['setup'])) {                $system[$k]['setup']['options'] = explode("\n", $system[$k]['setup']['options']);                foreach ($system[$k]['setup']['options'] as $kk => $vv) {                    $system[$k]['setup']['options'][$kk] = trim_array_element(explode("|", $system[$k]['setup']['options'][$kk]));                }            }        }    }    return $system;}/** * 根据数组中某个字段重新分组 * @param {dataArr:需要分组的数据；keyStr:分组依据} * @return: array */function array_group(array $dataArr, string $keyStr)   :array{    $newArr=[];    foreach ($dataArr as $k => $val) {        $newArr[$val[$keyStr]][] = $val;    }    return $newArr;}/** * 过滤数组元素前后空格 (支持多维数组) * @param $array 要过滤的数组 * @return array|string */function trim_array_element($array){    if (!is_array($array))        return trim($array);    return array_map('trim_array_element', $array);}function string2array($info){    if ($info == '') return array();    eval("\$r = $info;");    return $r;}function array2string($info){    //删除空格，某些情况下字段的设置会出现换行和空格的情况    if (is_array($info)) {        if (array_key_exists('options', $info)) {            $info['options'] = trim($info['options']);        }    }    if ($info == '') return '';    if (!is_array($info)) {        //删除反斜杠        $string = stripslashes($info);    }    foreach ($info as $key => $val) {        $string[$key] = stripslashes($val);    }    $setup = var_export($string, TRUE);    return $setup;}