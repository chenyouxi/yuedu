<?php/** * * +---------------------------------------------------------------------- *                      .::::. *                    .::::::::.            | AUTHOR: chenyouxi *                    :::::::::::           | EMAIL: 905100794@qq.com *                 ..:::::::::::'           | QQ: 905100794 *             '::::::::::::'               | WECHAT: xi20130618 *                .::::::::::               | DATETIME: 2019/9/14 6:39 下午 *           '::::::::::::::.. *                ..::::::::::::. *              ``:::::::::::::::: *               ::::``:::::::::'        .:::. *              ::::'   ':::::'       .::::::::. *            .::::'      ::::     .:::::::'::::. *           .:::'       :::::  .:::::::::' ':::::. *          .::'        :::::.:::::::::'      ':::::. *         .::'         ::::::::::::::'         ``::::. *     ...:::           ::::::::::::'              ``::. *   ```` ':.          ':::::::::'                  ::::.. *                      '.:::::'                    ':'````.. * +---------------------------------------------------------------------- */namespace app\admin\controller;use OSS\OssClient;use OSS\Core\OssException;use app\admin\model\Admin;use app\admin\model\AuthGroup;use app\admin\model\AuthGroupAccess;use app\admin\model\AuthRule;use app\common\model\Book as M;use app\common\model\BookType;use think\facade\Config;use think\facade\Db;use think\facade\Request;use think\facade\View;class Book extends Base{    // 列表    public function index()    {        //全局查询条件        $where = [];        $keyword = Request::param('keyword');        if (!empty($keyword)) {            $where[] = ['name', 'like', '%'.$keyword.'%'];        }        $dateran = Request::param('dateran');        if (!empty($dateran)) {            $getDateran = get_dateran($dateran);            $where[] = ['create_time', 'between', $getDateran];        }        //获取列表        $list = M::getList($where, $this->pageSize);        $view = [            'keyword'  => $keyword,            'dateran'  => $dateran,            'pageSize' => page_size($this->pageSize, $list->total()),            'page'     => $list->render(),            'list'     => $list,            'empty'    => empty_list(12),        ];        View::assign($view);        return View::fetch();    }    public function edit(){        $id = Request::param('id');        $info = M::edit($id);        $bookType = BookType::where('status', 1)            ->select();        $view = [            'info' => $info,            'bookType' => $bookType,        ];        View::assign($view);        return View::fetch('add');    }    //更新书籍    public function update(){        //获取书籍类目,更新类目下的文件        $bookTypeList = BookType::where("status",'=',1)->select();        foreach($bookTypeList as $key => $value){            //获取目录            $oss = new \Oss();            $data = $oss->getlistObjects($value['name']."/");            if (!empty($data['listObject'])) {                foreach ($data['listObject'] as $objectInfo) {                    //print($objectInfo->getKey() . "\n");                    if( substr($objectInfo->getKey(), -1) != $data['delimiter']){                        $bookFile= pathinfo($objectInfo->getKey());                        $dirname = $bookFile['dirname'];                        $name = $bookFile['filename'];                        $ext = $bookFile['extension'];                        $basename = $bookFile['basename'];                        //书籍名称更新数据库                        $where = [                            'name' => $name,                            'type_id' => $value['id'],                            'ext' => $ext                        ];                        $bookInfo = M::where($where)->find();                        if(!$bookInfo){                            $addData = [                                'name'=>$name,                                'status'=>1,                                'create_time' => time(),                                'ext'=>$ext,                                'basename'=>$basename,                                'dirname'=>$dirname,                                'type_id'=>$value['id']                            ];                            M::create($addData);                        } else {                            M::update([ "update_time"=>time() ],[ "name"=>$name,'ext'=>$ext,'basename'=>$basename,'dirname'=>$dirname,'type_id'=>$value['id'] ]);                        }                    }                }            }        }        $this->success('更新成功', 'Book/index');    }    function list_dir($dir){        $list = scandir($dir);        foreach ($list as $file){            $file_location=$dir.DS.$file;            if ( $file!="." && $file!=".." && $file!=".DS_Store" ){                if( is_dir($file_location) ){                    $bookTypeInfo = BookType::where('name','=',$file)->find();                    if( !$bookTypeInfo ){                        $addData = [                            'name'=>$file,                            'status'=>1,                            'create_time' => time()                        ];                        BookType::create($addData);                    }                    $this->list_dir($file_location);//递归获取深层目录文件                } else {                    //确定不是文件夹，写入到sql                    $file_name = array_pop(explode('.', $file));                    $bookTypeInfo = M::where('name','=',$file)->find();                    if( !$bookTypeInfo ){                        $addData = [                            'name'=>$file,                            'status'=>1,                            'create_time' => time()                        ];                        BookType::create($addData);                    }                    var_dump($file);die;                }            }        }    }    //OSS列举文件    public function getOssList(){        // 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。        $accessKeyId = "LTAIq3l1IzK88CQI";        $accessKeySecret = "vJn3MloZRB2cpxuxwMfu4NgSfa3bvQ";        // Endpoint以杭州为例，其它Region请按实际情况填写。        $endpoint = "http://oss-cn-shenzhen.aliyuncs.com";        $bucket= "nenyes";        $ossClient = new OssClient($accessKeyId, $accessKeySecret, $endpoint);        $prefix = 'yuedu/file/';        $delimiter = '/';        $nextMarker = '';        $maxkeys = 1000;        $options = array(            'delimiter' => $delimiter,            'prefix' => $prefix,            'max-keys' => $maxkeys,            'marker' => $nextMarker,        );        while (true) {            try {                $listObjectInfo = $ossClient->listObjects($bucket,$options);            } catch (OssException $e) {                printf(__FUNCTION__ . ": FAILED\n");                printf($e->getMessage() . "\n");                return;            }            // 得到nextMarker，从上一次listObjects读到的最后一个文件的下一个文件开始继续获取文件列表。            $nextMarker = $listObjectInfo->getNextMarker();            $listObject = $listObjectInfo->getObjectList();            $listPrefix = $listObjectInfo->getPrefixList();            $delimiter = $listObjectInfo->getDelimiter();            $data['nextMarker'] = $nextMarker;            $data['listObject'] = $listObject;            $data['listPrefix'] = $listPrefix;            $data['delimiter'] = $delimiter;            return $data;            //获取文件列表//            if (!empty($listObject)) {//                foreach ($listObject as $objectInfo) {//                    print($objectInfo->getKey() . "\n");//                }//            }            //获取目录列表//            if (!empty($listPrefix)) {//                foreach ($listPrefix as $prefixInfo) {//                    $prefixArr = explode( $listObjectInfo->getDelimiter(),$prefixInfo->getPrefix() );//                    foreach ($prefixArr as $key => $value) {//                        $data[] = $value;//                    }//                    //目录名称更新数据库//                    var_dump($data[2]);die;//                    print($prefixInfo->getPrefix() . "\n");//                }//            }//            if ($nextMarker === '') {//                break;//            }        }    }}